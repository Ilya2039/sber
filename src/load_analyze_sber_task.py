# -*- coding: utf-8 -*-
"""load_analyze_sber_task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16D5aQ5MJRyVMbk5Su1BoofCztW2c8QUP
"""

# src/data_analysis.py
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import sqlite3

def load_data_from_urls(analysis_url, info_url):
    diabets_analysis = pd.read_csv(analysis_url)
    diabets_info = pd.read_csv(info_url)
    return diabets_analysis, diabets_info

def combine_and_clean_data(diabets_analysis, diabets_info):
    # Соединение данных во временной базе данных SQLite
    conn = sqlite3.connect(':memory:')
    diabets_info.to_sql('diabets_info', conn, index=False, if_exists='replace')
    diabets_analysis.to_sql('diabets_analysis', conn, index=False, if_exists='replace')

    query = """
    SELECT *
    FROM diabets_analysis
    JOIN diabets_info ON diabets_analysis.id = diabets_info.id
    """
    full_df = pd.read_sql_query(query, conn)
    conn.close()

    # Обработка столбца давления
    full_df['pressure'] = full_df['pressure'].str.replace('\\', '/')
    full_df[['pressure1', 'pressure2']] = full_df['pressure'].str.split('/', expand=True)
    full_df['pressure1'] = pd.to_numeric(full_df['pressure1'], errors='coerce')
    full_df['pressure2'] = pd.to_numeric(full_df['pressure2'], errors='coerce')

    # Обработка пропусков в столбце 'weight'
    full_df['weight'].fillna(0, inplace=True)  # Замена пропусков нулями

    full_df.drop('id', axis=1, inplace=True)

    return full_df

def visualize_data(full_df):
    # Визуализация распределения уровня кетонов относительно наличия диабета
    plt.figure(figsize=(10, 6))
    sns.boxplot(x='diabetes', y='ket', data=full_df)
    plt.title('Распределение уровня кетонов относительно наличия диабета')
    plt.xlabel('Наличие диабета (0 - нет, 1 - да)')
    plt.ylabel('Уровень кетонов')
    plt.show()

    # Визуализация распределения пола по наличию диабета
    plt.figure(figsize=(10, 6))
    sns.countplot(x='gender', hue='diabetes', data=full_df)
    plt.title('Распределение пола по наличию диабета')
    plt.xlabel('Пол')
    plt.ylabel('Количество')
    plt.legend(title='Диабет', labels=['Нет', 'Да'])
    plt.show()

def main():
    # URL для загрузки данных
    analysis_url = 'https://raw.githubusercontent.com/Falconwatch/Hometasks/main/diabets/data/raw/diabetes_train_analysis.csv'
    info_url = 'https://raw.githubusercontent.com/Falconwatch/Hometasks/main/diabets/data/raw/diabetes_train_info.csv'

    diabets_analysis, diabets_info = load_data_from_urls(analysis_url, info_url)
    full_df = combine_and_clean_data(diabets_analysis, diabets_info)
    visualize_data(full_df)

    # Сохранение обработанных данных для последующего использования в обучении модели
    full_df.to_csv('preprocessed_data.csv', index=False)

if __name__ == "__main__":
    main()